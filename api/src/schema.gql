# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AllMoviesInput {
  country: String
  genres: [String!]
  languages: [String!]
  limit: Int! = 20
  page: Int! = 1
  rated: String
  searchTerm: String
  sortBy: String
  sortOrder: String
  year: Int
  yearFrom: Int
  yearTo: Int
}

type Awards {
  nominations: Int
  text: String
  wins: Int
}

type Critic {
  meter: Int
  numReviews: Int
  rating: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Imdb {
  id: Int
  rating: Float
  votes: Int
}

type Movie {
  awards: Awards
  cast: [String!]
  countries: [String!]
  createdAt: DateTime
  directors: [String!]
  fullplot: String
  genres: [String!]
  id: ID!
  imdb: Imdb
  isLiked: Boolean
  isViewed: Boolean
  languages: [String!]
  lastupdated: String
  num_mflix_comments: Int
  plot: String
  poster: String
  rated: String
  released: DateTime
  runtime: Int
  title: String!
  tomatoes: Tomatoes
  type: String
  updatedAt: DateTime
  year: Int
}

type MovieFilters {
  countries: [String!]!
  genres: [String!]!
  languages: [String!]!
  maxYear: Int!
  minYear: Int!
  ratings: [String!]!
}

type MovieRecommendation {
  movie: Movie!
  reason: String!
  similarity: Float!
}

type MoviesResponse {
  filters: MovieFilters!
  hasMore: Boolean!
  movies: [Movie!]!
  totalCount: Int!
}

type Mutation {
  createMovieEmbeddings(batchSize: Float! = 10): String!
}

type Query {
  movie(id: ID!): Movie
  movieFilters: MovieFilters!
  movies(input: AllMoviesInput!): MoviesResponse!
  recommendMovies(input: RecommendMoviesInput!): RecommendationsResponse!
}

input RecommendMoviesInput {
  description: String!
  genres: [String!]
  limit: Int! = 10
  page: Int! = 1
  rated: String
  yearFrom: Int
  yearTo: Int
}

type RecommendationsResponse {
  hasMore: Boolean!
  recommendations: [MovieRecommendation!]!
  searchDescription: String!
  totalCount: Float!
}

type Tomatoes {
  critic: Critic
  fresh: Int
  lastUpdated: DateTime
  rotten: Int
  viewer: Viewer
}

type Viewer {
  meter: Int
  numReviews: Int
  rating: Float
}